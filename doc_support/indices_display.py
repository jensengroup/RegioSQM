#!/usr/bin/env python
# coding: utf-8

# name:    indices_display.py
# author:  nbehrnd@yahoo.com
# license: 2020, MIT
# date:    2020-09-22 (YYYY-MM-DD)
# edit:    2020-09-22 (YYYY-MM-DD)

"""For each EAS group, draw structures with atom indices into a .svg

To facilitate replication of the results by regiosqm.py, this script
generates .svg of the lists generated by extract_compound_numbers.py
where the atoms are labeled by RDKit's atom indices.  Thus, it may be
easier to recreate a table about regiosqm.py's earlier output (as in
the SI of the publication) or / and by the dedicated website,
http://www.regiosqm.org.

The hard-encoded input file is the text file obtained with script
extract_compound_numbers.py inspecting EAS groups, i.e. an organized
list of a compound identifier and the SMILES string like

compound1 c1ccccc1
compound2 c1ccccn1

with an explicit single separating the two columns, in absence of any
heading or trailing blank lines in these input files.

The script is inspired by these references:
+ outer structure, permanent .svg record: reply by user OnlyBelter
  on https://github.com/rdkit/rdkit-tutorials/issues/5
+ display of atom index: Takayuki Serizawa, RDKit Cookbook on
  http://www.rdkit.org/docs/Cookbook.html
and written within Python 3.8.6, rdkit 2019.09.1, and Jupyter Notebook
(IPython 7.18.1)."""

from rdkit import Chem
from rdkit.Chem.Draw import IPythonConsole
from rdkit.Chem import Draw

smiles = []
input_file = str("list_1.csv")


def draw_multiple_mol(smiles_list, mols_per_row=4, file_path=None):
    mols = []
    for i in smiles_list:

        mol = Chem.MolFromSmiles(i)
        for atom in mol.GetAtoms():
            atom.SetAtomMapNum(atom.GetIdx())
        mols.append(mol)

    mols_per_row = min(len(smiles_list), mols_per_row)

    img = Draw.MolsToGridImage(mols,
                               molsPerRow=4,
                               subImgSize=(300, 300),
                               useSVG=True)
    if file_path:
        with open(file_path, 'w') as f_handle:
            f_handle.write(img.data)
    return img


with open(input_file, mode="r") as source:
    for line in source:
        smiles_entry = str(line).split()[1]
        smiles_entry = smiles_entry.strip()
        smiles.append(smiles_entry)

draw_multiple_mol(smiles, file_path='output.svg')
